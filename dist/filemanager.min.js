(function () {
    'use strict';

    // Making a reference to the fileManager wrapper dom element in the window object
    window.fmWrapper = document.querySelector('.fm-wrapper');

    // polyfill for the Element.prototype.closest method
    if (!Element.prototype.closest) {
        var proto = Element.prototype;

        if (!proto.matches) {
            proto.matches = proto.msMatchesSelector || proto.webkitMatchesSelector;
        }

        proto.closest = function (selector) {
            var ele = this;

            while (ele.parentElement) { // Check for the parent element
                var parent = ele.parentElement;
                if (parent.matches(selector)) {
                    // If the parent matches the selector return it
                    return parent;
                }
                // otherwise switch the 'ele' to the parent element
                ele = ele.parentElement;
            }
        };
    }

    // NodeList forEach polyfill
    if (!NodeList.prototype.forEach) {
        NodeList.prototype.forEach = function (callback, thisArg) {
            for (var i = 0; i < this.length; i++) {
                callback.call(thisArg, this[i], i, this);
            }
        };
    }

    // A very simple polyfill to the classList property
    // Implemented methods : item, add, remove, contains
    if (
        // Check if the classList property is defined under the base Element Object
        !('classList' in document.createElement('_'))
    ) {

        var classList = function (element) {
            element.className.split(' ').forEach(function (name) {
                this.push(name);
            }.bind(this));

            this._update = function () {
                element.setAttribute('class', this.join(' '));
            };
        };

        // Making the classList prototype inherit Array prototype methods
        classList.prototype = Array.prototype;

        // A shortcut for the classList prototype
        classListProto = classList.prototype;

        // classList.add()
        classListProto.add = function () {
            for (var i = 0; i < arguments.length; i++) {
                this.push(arguments[i]);
            }

            this._update();
        };

        // classList.remove()
        classListProto.remove = function () {
            for (var j = 0; j < arguments.length; j++) {
                for (var i = 0; i < this.length; i++) {
                    if (this[i] === arguments[j]) {
                        this.splice(i, 1);
                    }
                }
            }

            this._update();
        };

        // classList.item()
        classListProto.item = function (index) {
            return this[index];
        };

        // classList.contains()
        classListProto.contains = function (token) {
            return this.indexOf(token) !== -1;
        };

        // Attach the classList object to the Element prototype
        Object.defineProperty(window.Element.prototype, 'classList', {
            get: function () {
                return new classList(this);
            },
            enumerable: true,
            configurable: true
        });
    }

    var
        chmod = [0, 0, 0],
        rules = {
            read: 4,
            write: 2,
            execute: 1
        };

    fmWrapper.querySelectorAll('.perm-table .checkbox')
        .forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                fmWrapper.querySelector('.numeric-chmod').textContent = getChmodString.call(this);
            });
    });

    function getChmodString() {
        var
            group = this.dataset.group,
            action = this.dataset.action,
            checked = this.querySelector('input[type="checkbox"]').checked;

        switch (group) {
            case 'owner':
                if (checked) {
                    chmod[0] += rules[action];
                } else {
                    chmod[0] -= rules[action];
                }
                break;
            case 'group':
                if (checked) {
                    chmod[1] += rules[action];
                } else {
                    chmod[1] -= rules[action];
                }
                break;
            case 'others':
                if (checked) {
                    chmod[2] += rules[action];
                } else {
                    chmod[2] -= rules[action];
                }
                break;
        }

        return '0' + chmod.join('');
    }

    // Checking in the local storage for the theme color
    if (localStorage.getItem('fm-theme')) {
        updateTheme(localStorage.getItem('fm-theme'));
    }

    // Theme options click event
    fmWrapper.querySelectorAll('.theme-option')
        .forEach(function (option) {
            option.addEventListener('click', function () {
                updateTheme(this.dataset.theme);
            });
    });

    function updateTheme(theme) {
        // Removing the 'selected' class from the theme options
        fmWrapper.querySelectorAll('.theme-option')
            .forEach(function (item) {
                item.classList.remove('selected');
            });

        fmWrapper.querySelector('.theme-option[data-theme=' + theme + ']')
            .classList.add('selected');

        // Get all theme classes
        var themeClasses = [];
        fmWrapper.querySelectorAll('.theme-option')
            .forEach(function (item) {
                themeClasses.push(item.dataset.theme);
            });

        // removing all other theme classes
        fmWrapper.classList.forEach(function (className) {
            themeClasses.forEach(function (item) {
                fmWrapper.classList.remove(item);
            });
        });

        // add the theme class
        fmWrapper.classList.add(theme);
        localStorage.setItem('fm-theme', theme);
    }

    window.addEventListener('DOMContentLoaded', function () {
        setTimeout(function () {
            fmWrapper.querySelectorAll('.loading').forEach(function (item) {
                item.classList.remove('loading');
            });
        }, 500);
    });

    // DOM Elements
    var
        editor = fmWrapper.querySelector('#fm-editor'),
        lineNumbers = editor.querySelector('.line-numbers'),
        contentArea = editor.querySelector('.content-area');

    function updateLineNumbers() {
        var
            // Textarea content
            content = contentArea.value,
            // Storing the lines count
            lines = content.split('\n').length;

        // Clear the div that's contains the line numbers
        lineNumbers.innerHTML = '';

        // Append the numbers according to lines count
        for (var i = 0; i < lines; i++) {
            appendNumber(i + 1);
        }

        // Making the textarea element and the line numbers div at the same height
        contentArea.style.height = window.getComputedStyle(lineNumbers).getPropertyValue('height');
    }

    function appendNumber(number) {
        var span = document.createElement('span');
        span.textContent = number;
        lineNumbers.appendChild(span);
    }

    // Applying events
    ['input', 'paste'].forEach(function (event) {
        contentArea.addEventListener(event, updateLineNumbers);
    });

    // first line number
    updateLineNumbers();

    // A simple object to interact with the editor
    var FmEditor = function() {

        function validateContent() {
            return (typeof content !== 'string');
        }

        this.add = function (content) {
            if (!validateContent) return;
            contentArea.value += content;
            updateLineNumbers();
        };

        this.replace = function (content) {
            if (!validateContent) return;
            contentArea.value = content;
            updateLineNumbers();
        };

        this.clear = function () {
            contentArea.value = '';
            updateLineNumbers();
        };
    };

    // Attach the FmEditor to the window object
    window.FmEditor = new FmEditor();

    // Slidebar toggle
    fmWrapper.querySelector('.toggle-slidebar').addEventListener("click", function () {
        document.querySelector('.slidebar').classList.toggle('show');
    });

    // DOM elements
    var
        table = fmWrapper.querySelector('.files-table'),
        fileItems = table.querySelectorAll('.file-item'),
        allCheckboxes = table.querySelectorAll('.file-item .checkbox input[type="checkbox"]');

    // Table click item
    fileItems.forEach(function (item) {
        item.addEventListener('click', function (e) {
            if (!e.target.closest('.checkbox')) { // Ignore event bubbling for the checkbox
                if (!e.shiftKey && !e.ctrlKey) { // Multiple selection with shift & ctrl keys
                    fileItems.forEach(function (item) {
                        item.classList.remove('selected');
                    });
                    allCheckboxes.forEach(function (item) {
                        item.checked = false;
                    });
                }
                this.classList.add('selected');
                this.querySelector('.checkbox input[type="checkbox"]').checked = true;
                disableFooterRightButtons(false);
            }
            
        });
    });

    // Each checkbox change event
    allCheckboxes.forEach(function (item) {
        item.addEventListener('change', function (  ) {
            this.closest('.file-item').classList.toggle('selected'); 
            disableFooterRightButtons(table.querySelectorAll('.file-item.selected').length === 0);
        });
    });

    // Table Select All
    fmWrapper.querySelector('.files-select-all').addEventListener("change", function () {
        this.checked ? doSelect(true) : doSelect(false);
    });

    // Toolbar button select all
    fmWrapper.querySelector('.toolbar .files-select').addEventListener('click', function () {
        doSelect(true);
    });

    // Toolbar button unselect all
    fmWrapper.querySelector('.toolbar .files-unselect').addEventListener('click', function () {
        doSelect(false);
    });

    // Unselect Table Files when clicking out of the table
    fmWrapper.addEventListener('click', function(e) {
        if (!e.target.closest('.files-table') 
            && !e.target.closest('.files-select')
            && !e.target.closest('.files-unselect')
            && !e.target.closest('.footer')
            && !e.target.closest('.modal')) {
            fmWrapper.querySelector('.files-select-all').checked = false;
            doSelect(false);
            disableFooterRightButtons(true);
        }
    });

    function doSelect(selectAll) {
        fmWrapper.querySelector('.files-select-all').checked = selectAll;
        [].forEach.call(allCheckboxes, function (checkbox) {
            checkbox.checked = selectAll;
            checkbox.closest('.file-item')
                .classList[selectAll ? 'add' : 'remove']('selected');
        });
    }

    function disableFooterRightButtons(disable) {
        fmWrapper.querySelectorAll('.right-buttons button').forEach(function(button) {
            button.disabled = disable;
        });
    }

    // Create and add the modal overlay to the DOM
    var overlayDiv = document.createElement('div');
    overlayDiv.classList.add('modal-overlay');
    fmWrapper.appendChild(overlayDiv);

    // Modal Show
    fmWrapper.querySelectorAll('*[data-modal]').forEach(function (item) {
        item.addEventListener('click', function () {
            fmWrapper.querySelector(this.dataset.modal).classList.add('show');
            overlayDiv.classList.add('show');
        });
    });

    // Modal Hide
    fmWrapper.querySelectorAll('*[data-close="modal"]').forEach(function (item) {
        item.addEventListener('click', function () {
            this.closest('.modal').classList.remove('show');
            overlayDiv.classList.remove('show');
        });
    });

}());
